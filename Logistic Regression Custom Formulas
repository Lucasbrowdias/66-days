//File dedicated to all custom formulas availiable to use in sheets

/**
 * Multiplies two arrays
 *
 * @param {array1} input The first array in the multiplication
 * @param {array2} input The second array in the multiplication
 * @return The multiplied array.
 * @customfunction
 */

function ARRAYMULT(array1,array2) {
  //array size info
  var array1Xlen = array1[0].length
  var array1Ylen = array1.length
  var array2Xlen = array2[0].length
  var array2Ylen = array2.length
  
  var check = array1Xlen==array2Ylen

  var newArray= []
  if( check){ //it only works when the columns of the first array is equal to the number of rows of the second array
  for(i=0;i<array1Ylen;++i){ //iteration to create each row of values
    var arrayRow = []
    for (j=0;j<array2Xlen;++j){ //iteration to create each value
      var arrayValue = 0
      for (v=0;v<array1Xlen;++v){ //sum iteration as given by array multplication
        arrayValue += array1[i][v]*array2[v][j]
      }
      arrayRow.push(arrayValue)
    }
    newArray.push(arrayRow)
  }
  return newArray}
  else {return "NA"}
    
}

/**
 * Count the numbers of multiple columns
 *
 * @param {array} input The set of data to count numbers by columns
 * @return The amount of number cells in each column.
 * @customfunction
 */

function MULTICOLCOUNT(array){
  //variables
  var output = []
  var rows = array.length
  var columns = array[0].length

  for (i=0;i<columns;++i){ //iteration for each column
    var numbers = 0;
    for (j=0;j<rows;++j){ // number counter for the column
      numbers += typeof array[j][i] =='number' ? 1:0
    }
    output.push(numbers)
  }

  return output

}

/**
 * Checks all the rows to see if all numbers are data
 *
 * @param {array} input The data to check if all columns are numbers in a given row
 * @return A TRUE or FALSE boolean of wheter each row only has numbers or not
 * @customfunction
 */


function ROWFILTERCHECK(array){
  
  //variables
  var output = []
  var rows = array.length
  var columns = array[0].length

  for (i=0;i<rows;++i){ //iteration for each row
    var bool = true;
    for (j=0;j<columns;++j){ //AND type checker for the row
      bool = bool && typeof array[i][j] == 'number'
      }
    output.push(bool)
   } 

  return output

}

/**
 * Groups the data of a given sorted column into a certain number of bins by frequency
 *
 * @param {array} input The column of data to bin
 * @param {numBins} input The number of bins to group the data
 * @return The boundaries of each bin.
 * @customfunction
 */

function FREQBIN(array,numBins) {
    //variables
    var arrayLen = array.length
    var binSize = Math.ceil(arrayLen/numBins) 
    var limits = [array[0]]
    
    for (i=0;i<numBins;++i){
               
        limits.push((i+1)*binSize > arrayLen ? array[arrayLen-1]: array[(i+1)*binSize-1])
        //returns last value if last bin is smaller
    }
     
     return limits
           
}

/**
 * Groups the data of a given sorted column into a certain number of bins by frequency and finds each bin average
 *
 * @param {array} input The column of data to bin
 * @param {numBins} input The number of bins to group the data
 * @return The average value of each bin.
 * @customfunction
 */

function FREQBINAVG(array,numBins) {
    //variables
    var arrayLen = array.length
    var binSize = Math.ceil(arrayLen/numBins) 
    var avg = []
    
    for (n=0;n<numBins;++n){
        var bin = []
        var check = n
        for(b=n*binSize;b<(n+1)*binSize;++b){ //iteration to create array of bin values
          
          if(b<arrayLen) {bin.push(array[b][0])} //only pushes values until array size
         
        }        
        var binAvg = arrayAvg(bin) //uses support function to calculate array average
        avg.push([binAvg])
    }
     
     return avg
           
}

/**
 * Groups the data of a given sorted column into a certain number of bins by frequency and also returns each bin's average value
 *
 * @param {array} input The column of data to bin
 * @param {numBins} input The number of bins to group the data
 * @return The boundaries and the average value of each bin, with the average between its boundaries.
 * @customfunction
 */

function FREQBINMIX (array,numBins,sheet=true){
  //variables
  var arrayLen = array.length
  var binSize = Math.ceil(arrayLen/numBins) 
  if(sheet){ //code designed for a 2D array input
   var stats = [array[0]] //brings the first value of the array
        
   for (n=0;n<numBins;++n){
    if(n<numBins){
      var bin = []
      for(b=n*binSize;b<(n+1)*binSize;++b){ //brings first the average value
            
        if(b<arrayLen) {bin.push(array[b][0])}
         
        }        
      var binAvg = arrayAvg(bin)
      stats.push([binAvg])
      }
      stats.push((n+1)*binSize > arrayLen ? array[arrayLen-1]: array[(n+1)*binSize-1]) //then the bin upper bound
      }
    }
    else { //mirrored code for a 1D array (vector)
      var stats = [[array[0]]]
        
      for (n=0;n<numBins;++n){
        if(n<numBins){
        var bin = []
        for(b=n*binSize;b<(n+1)*binSize;++b){
            
          if(b<arrayLen) {bin.push(array[b])}
         
          }        
          var binAvg = arrayAvg(bin)
          stats.push([binAvg])
          }
        stats.push([(n+1)*binSize > arrayLen ? array[arrayLen-1]: array[(n+1)*binSize-1]])
        }
      }
  return stats
}

/**
 * Groups the data of a group of columns into a certain number of bins by frequency and average
 *
 * @param {array} input The columns of data to bin
 * @param {binVector} input The number of bins to group each column
 * @return The boundaries and average value of each bin for each column.
 * @customfunction
 */

function MULTICOLBIN (array,binVector){

  //variables
  var numCol = array[0].length
  var numRows = array.length
  var returnSize = binVector.reduce(function(a, b) {return Math.max(a, b);})*2+1 //the number of returned values in the     biggest bin to adjust return array
  var baseArray = []
  var data = []


  for (i=0;i<numCol;++i){ // iteration for each column
    var column = []
    for (j=0;j<numRows;++j){ //iteration to make sorting possible
      column.push(array[j][i])
      }
    column.sort(function(a, b){return a - b})
    baseArray.push(FREQBINMIX(column,binVector[i],false)) //use of the previous function in a 1d case
    }

  for (r=0;r<returnSize;++r){ //iteration to build the return array
    var row = []
    for(c=0;c<numCol;++c){
      row.push(binVector[c]*2+1>r?baseArray[c][r][0]:"") //checks if the columns will have binning data to fill
      }

    data.push(row)

    }
 return data
}

/**
 * Creates all possible combinations from a group of data
 *
 * @param {array} input The data to create all combinations
 * @param {paramSize} input The number of values in each column
 * @return All possible combinations of the dataset (eliminate duplicates by using UNIQUE).
 * @customfunction
 */

function COMBINATIONS (array,paramSize){
  //variables
  var iterations = 1 //number of the column iterated
  for(i=0;i<paramSize.length;++i){ //multiplies all paramSize values to find how many combinations there will be
    iterations = iterations*paramSize[i][0]
  }
  var combinations = []
  
  for (c=0;c<iterations;++c){combinations[c]=[]} //creates a array for each row of combinations to be inputed
  
  var rounds = 1 //times all column values will go around
  var repititions = iterations //times each value will repeat itself before going to next value
  for(p=0;p<paramSize.length;++p){
    repititions = repititions/paramSize[p] //repetitions decrease for each column
    for(n=0;n<rounds;++n){
      for(c=0;c<paramSize[p];++c){
        for(r=0;r<repititions;++r){      
          row = (n*paramSize[p]*repititions)+c*repititions+r
          combinations[row].push(array[c][p])
        }
      }
    }
    rounds = rounds*paramSize[p] //number of rounds increase for each column
   
  }


  return combinations
}

/**
 * Analyzes through logistic regression and bins a given data set
 *
 * @param {dataSet} input The dataset to be analyzed.
 * @param {coefficients} input The coefficients of the logistic regression equation.
 * @param {variableNames} input The names of each of the coefficients' variables.
 * @param {avgs} input The set of averages of each bin.
 * @param {upBound} input The upper bound of each bin.
 * @param {lowBound} input The lower bound of each bin.
 * @param {lossData} input The log loss (cost function) value for each row of the dataset.
 * @param {yThreshold} input The threshold value to determine success in the logistic regression formula.
 * @param {yBound} input The extreme treshold values that determine sure success or failure.
 * @return The analysis returns for each variable and bin the averages, boundary values, the success rates, log loss, threshold values, and the comparison between the threshold splits.
 * @customfunction
 */

function LOGISTICANALYZER(dataSet,coefficients,variableNames,avgs,upBound,lowBound,lossData,yThreshold=0,yBound=2.944){
  var analysisArray = []
  var col = avgs[0].length
  var firstRow = ["Parameter"]

  //declaration of the column names
  for (a=1;a<col;++a){firstRow.push("base "+variableNames[a][0])}
  for (a=1;a<col;++a){firstRow.push("upper "+variableNames[a][0])}
  for (a=1;a<col;++a){firstRow.push("lower "+variableNames[a][0])}
  firstRow.push("Bin Count","Bin Success Rate","Model Success Rate","Bin Log Loss","Model Accuracy")
  firstRow.push("Threshold", "T Above Count","T Above Success Rate","T Below Count","T Below Success Rate","T Chance Delta")
  firstRow.push("Upper Threshold","U Above Count","U Above Success Rate","U Below Count","U Below Success Rate","U Chance Delta")
  firstRow.push("Lower Threshold", "L Above Count","L Above Success Rate","L Below Count","L Below Success Rate","L Chance Delta")
  analysisArray.push(firstRow)
  
  for(p=1;p<coefficients.length;++p){ //iteration for each variable
    // create the arrays to check values within each bound
    var threshold = equationValues(avgs,coefficients,p,yThreshold)
    var upperBound = equationValues(avgs,coefficients,p,yBound)
    var lowerBound = equationValues(avgs,coefficients,p,yBound*-1)

    for (r=0;r<threshold.length;++r){ //iteration for each row within the variable
      var rowData = [variableNames[p][0]] //row to have all of the analysis data, starting by the variable name
      //base values
      for (a=1;a<col;++a){rowData.push(avgs[r][a])}
      for (a=1;a<col;++a){rowData.push(upBound[r][a])}
      for (a=1;a<col;++a){rowData.push(lowBound[r][a])}


      //bin data
      var binRet = logisticBinFilter (dataSet,upBound[r],lowBound[r],lossData) //returns count, success rate & log loss
      var modelChance = logisticModelChance(avgs[r],coefficients)
      rowData.push(binRet[0],binRet[1],modelChance,binRet[2],1-Math.abs(1-modelChance/binRet[1])) //last value is accuracy

      //threshold data
      rowData.push(threshold[r][p])
      var threshRet = [logisticFilterAbove (dataSet,threshold[r][p],upBound[r],lowBound[r],p+1),
      logisticFilterBelow (dataSet,threshold[r][p],upBound[r],lowBound[r],p+1)] //returns count and success rate for each split
      var threshDelta = threshRet[0][1] == "NA" || threshRet[1][1] =="NA" ? "NA" : threshRet[0][1]- threshRet[1][1]
      rowData.push(threshRet[0][0],threshRet[0][1],threshRet[1][0],threshRet[1][1],threshDelta)
      

      //upper bound data
      rowData.push(upperBound[r][p])
      var upRet = [logisticFilterAbove (dataSet,upperBound[r][p],upBound[r],lowBound[r],p+1),
      logisticFilterBelow(dataSet,upperBound[r][p],upBound[r],lowBound[r],p+1)] //returns count and success rate for each split
      var upDelta = upRet[0][1] == "NA" || upRet[1][1] =="NA" ? "NA" : upRet[0][1]- upRet[1][1]
      rowData.push(upRet[0][0],upRet[0][1],upRet[1][0],upRet[1][1],upDelta)

      //lower bound Data
      rowData.push(lowerBound[r][p])
      var lowRet = [logisticFilterAbove (dataSet,lowerBound[r][p],upBound[r],lowBound[r],p+1),
      logisticFilterBelow(dataSet,lowerBound[r][p],upBound[r],lowBound[r],p+1)] //returns count and success rate for each split
      var lowDelta = lowRet[0][1] == "NA" || lowRet[1][1] =="NA" ? "NA" : lowRet[0][1]- lowRet[1][1]
      rowData.push(lowRet[0][0],lowRet[0][1],lowRet[1][0],lowRet[1][1],lowDelta)

      analysisArray.push(rowData)      

    }
  }

  return analysisArray

}

/**
 * Calculates the log loss (cost function) of a data set given certain coefficients.
 *
 * @param {array} input The data to calculate the expected probablity
 * @param {coefficients} input The logistic regression coefficients
 * @param {yvalues} input The outcome values of the dataset
 * @return The log loss for each of the data's rows.
 * @customfunction
 */

function LOGLOSS (array,coefficients,yValues){
  var loss= []
  for(i=0;i<array.length;++i){
    var prob = logisticModelChance(array[i],coefficients) //function to calculate the logistic regression y value
    var correctedProb = yValues[i][0] == 1 ? prob : 1- prob; //the cost function is inversed when y = 0

    loss.push([Math.log(correctedProb)]) //ln function to properly create the log loss function

  }
  return loss
}

