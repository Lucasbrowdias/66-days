//file dedicated to the machine learning part of the support vector machine tool for sheets.

function supportVectorMachine() { //script to apply the gradient descent to optimize the support vector machine model
  //declaration of the used sheets
  var ss = SpreadsheetApp.getActiveSpreadsheet()
  var interface = ss.getSheetByName("Interface")
  var ssml = ss.getSheetByName("ML Gradient Log")
  var dataSet = ss.getSheetByName("Adjusted Data")

 //declaration of running parameters
  var numCoef = ssml.getRange("B1").getValue(); //number of coefficients in the equation
  var numRows = ssml.getRange("D1").getValue(); //number of rows of the dataset
  var mlConfig = interface.getRange(1,7,4).getValues(); //learning rate, steps, tolerance, and bias factor

  //clearing the step log data from the previous run
  if (ssml.getLastRow()-2>0){ssml.getRange(3,1,ssml.getLastRow()-2,4).clearContent()}
  interface.getRange(7,7,interface.getLastRow()-6).clearContent()

  // declaration of data and model parts
  var coefficients = [];
  for (n=0;n<numCoef;++n){coefficients.push([0])}
  var data = dataSet.getRange(2,4,numRows,numCoef).getValues();
  var yValues = dataSet.getRange(2,3,numRows).getValues();
  
  //setup of the gradient descent
  var log = [] //where each of the steps improvement values will be logged
  var mlCheck = true //value to check for the iteration
  var counter = 0 //counter to break an infite loop
  
  while (mlCheck){
    var coefCheck = true //variable to check if all variables are within the tolerance level
    var step = gradientDescentStepSVM(data,yValues,coefficients,mlConfig[0][0],mlConfig[3][0]) //returns the new coefficients, the step sizes and cost function
    var timeStamp = new Date () //timestap to 
    var row = [timeStamp,step[2][0]]
    for (n=0;n<numCoef;++n){row.push(coefficients[n][0])}
    log.push(row) //logs the time, cost function, and coefficients
    for(s=0;s<step[1].length;++s){ //checks if all step sizes were smaller than the tolerance level
      coefCheck = coefCheck && Math.abs(step[1][s]) < mlConfig[2][0]
    }
    counter += 1
    // breaks the loop if all steps are lower than the tolerance level or the counter reaches the limit
    mlCheck = mlCheck && counter <mlConfig[1][0] && !coefCheck 
    for(c=0;c<coefficients.length;++c){ //updates the coefficients
      coefficients[c][0] = step[0][c]
    }
    
  }
  
  ssml.getRange(3,1,log.length,2+coefficients.length).setValues(log) // outputs the step log
  interface.getRange(7,7,coefficients.length).setValues(coefficients) //outputs the final coefficients
  
}

function gradientDescentStepSVM(data,yValues,coefficients,learningRate,bFactor){ //the function for each gradient descent iteration
  var stepSizes = [] //where to store how much each variable will change
  var newCoefficients = [] //where to store the updated coefficients
  var dataSize = data.length
  for(c=0;c<coefficients.length;++c){ //iteration for each variable
    var gradientValues = 0
    for(r=0;r<dataSize;++r){ //calculates the gradient for each row of data
      var yValue = linearEquation(data[r],coefficients) //calculates the expected machine value
      if(yValue*yValues[r]>1){ //checks if the data point has a good classification or not
        gradientValues += (c==0?0:2*coefficients[c])/dataSize //correction when point is correctly classified
      } else {
        gradientValues += (-yValues[r]*data[r][c]+(c==0?0:2*coefficients[c]))/(c==0?bFactor:dataSize) //correction when point is misclassified
      }
      
  }
    //gradient descent output for the variable
    stepSizes.push(gradientValues*learningRate)
    newCoefficients.push(coefficients[c]-gradientValues*learningRate)
  }
  //coefficient transformation to be able to use the cost function
  var transposedCoefficients = []
  for (t=0;t<newCoefficients.length;++t){
    transposedCoefficients.push([newCoefficients[t]])
  }
  var cost = [costFunction(data,transposedCoefficients,yValues)] //returns the cost function of the step
  return [newCoefficients,stepSizes,cost]

}

function costFunction (array,tCoefficients,yValues){ //returns the cost function of the whole data set as a single number
  var loss= 0
  for(i=0;i<array.length;++i){
    var prod = linearEquation(array[i],tCoefficients)
    var correctedProd = prod*yValues[i]>1 ? 0 : 1 - prod*yValues[i];

    loss += correctedProd/array.length

  }
  return loss
}
