//functions to be used only within scripts enviroment

function frequencyBinning(array,numBins) { // returns the bin boundaries
    
    var arrayLen = array.length
    var binSize = int(arrayLen/numBins) 
    var limits = [array[0]]
    
    for (i=0;i<binSize;++i){
        limits.push(i*binSize > arrayLen ? arrayLen[a-1] : arrayLen[i*binSize-1])
    }
     
     return limits
           
}

function arraySum(array){ //to sum all values within an array
  var sum = 0

  for(s=0;s<array.length;++s){
    sum += array[s]
  }
  return sum

}

function arrayAvg(array){ //to find the average value of an array
  var sum = 0

  for(s=0;s<array.length;++s){
    sum += array[s]
  }
  return sum/array.length

}

function equationFreezer (array,coeffiecents,paramIndex,y=0){ 
  //bring the x values that meet the y value for the function whenn all but one variable are set
  var xValues = []
  var paramSize = coeffiecents[0].length

  for (i=0;i<array.length;++i){
    if(coeffiecents[0][paramIndex]==0 ){
      xValues.push([[0]]) //returns zero values when the chosen variable does not influence the equation
    }
    else{
      var x = y/coeffiecents[0][paramIndex] //starts the iteration by the y value divided by the coeffiecent
      for(b=0;b<paramSize;++b){ //iteratively finds the x value by adding each other variable value divided by the coefficent
        x += b==paramIndex ? 0 : -coeffiecents[0][b]*array[i][b]/coeffiecents[0][paramIndex]
      }
      xValues.push([x])
    }
  }
  return xValues
}

function equationValues (array,coeffiecents,paramIndex,y=0){ 
  //bring the array of values to meet a certain y when all but one variable are set
  var xValues = []
  var paramSize = coeffiecents.length
  var newArray = []

  for (i=0;i<array.length;++i){ // same function as the equation freezer, except for output
    var row = []
    if(coeffiecents[paramIndex][0]==0 ){
      var x = 0
    }
    else{
      var x = y/coeffiecents[paramIndex][0]
      for(b=0;b<paramSize;++b){
        x += b==paramIndex ? 0 : -coeffiecents[b][0]*array[i][b]/coeffiecents[paramIndex][0]
      }
    }
    for (v=0;v<paramSize;++v){ row.push(v==paramIndex ? x : array[i][v])}
    newArray.push(row)
  }
  return newArray
}

function logisticFilterAbove (array,parameter,upBound,lowBound,pIndex,start=2,yIndex=0){ 
  //returns the number of values and y value of the data set that are below calculated value (parameters) and in bounds
  //In default configuration, the first two columns will be the y value and b0 (constant value in equation)
  var data = []
  var count = 0
  var success = 0

  for (a=0;a<array.length;++a){
    var bool = array[a][pIndex]>parameter
    if (bool) {
        for (s=start;s<upBound.length+1;++s){ //checks if all conditions are met for each value in row
          bool = bool && array[a][s]<=upBound[s-1]
          bool = bool && array[a][s]>=lowBound[s-1]
      }}
      //updates the return stats
      count += bool ? 1: 0
      success += bool ? array[a][yIndex]:0

    }
  success = count >0 ? success/count : "NA" //brings the average value of y or NA when there were no values

  data.push(count,success) //simple array to bring both values

  return data
}

function logisticFilterBelow (array,parameter,upBound,lowBound,pIndex,start=2,yIndex=0){ 
  //returns the number of values and y value of the data set that are below calculated value (parameters) and in bounds
  //In default configuration, the first two columns will be the y value and b0 (constant value in equation)
  var data = []
  var count = 0
  var success = 0

  for (a=0;a<array.length;++a){
    var bool = array[a][pIndex]<=parameter
    if (bool){
        for (s=start;s<upBound.length+1;++s){ //checks if all conditions are met for each value in row
          bool = bool && array[a][s]<=upBound[s-1]
          bool = bool && array[a][s]>=lowBound[s-1]
      }}
      //updates the return stats
      count += bool ? 1: 0
      success += bool ? array[a][yIndex]:0

    }
  success = count >0 ? success/count : "NA" //brings the average value of y or NA when there were no values

  data.push(count,success) //simple array to bring both values

  return data
}

function logisticBinFilter (array,upBound,lowBound,lossVector,start=2,yIndex=0){ 
  //returns the number of values and y value of the data set that are below calculated value (parameters) and in bounds
  //In default configuration, the first two columns will be the y value and b0 (constant value in equation)
  var data = []
  var count = 0
  var success = 0
  var logLoss = 0

  for (a=0;a<array.length;++a){
    var bool = true
    for (s=start;s<lowBound.length+1;++s){ //checks if all conditions are met for each value in row
       bool = bool && array[a][s]<=upBound[s-1]
       bool = bool && array[a][s]>=lowBound[s-1]
      }
      //updates the return stats
      count += bool ? 1: 0
      success += bool ? array[a][yIndex]:0
      logLoss += bool ? -lossVector[a][0] : 0
    }
  success = count >0 ? success/count : "NA" //brings the average value of y or NA when there were no values
  logLoss = count >0 ? logLoss/count : "NA"
  data.push(count,success,logLoss) //simple array to bring both values

  return data
}

function logisticModelChance (xArray,coefficents){ //calculates the p value of a given logistic regression equation
 //b0 value must be equal to 1 if used
  var y = 0
  for (m=0;m<xArray.length;++m){
    y += xArray[m]*coefficents[m][0] //iteration to add all variable parts
  }

  return 1/(1+Math.exp(-y)) //sigmoid function to make the linear equation into logistic

}

function linearEquation (xArray,coefficents){ //calculates the y value of a regular linear equation
 //b0 value must be equal to 1 if used
  var y = 0
  for (m=0;m<xArray.length;++m){
    y += xArray[m]*coefficents[m][0] //iteration to add all variable parts
  }

  return y 

}

function clearFormat(sheet,range) { //clears any formatting and makes any text white
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheet);
  spreadsheet.getRange(range).clearFormat().setFontColor('#ffffff')
};
